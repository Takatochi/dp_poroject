Index: app/app.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/app.go b/app/app.go
new file mode 100644
--- /dev/null	(date 1660821285615)
+++ b/app/app.go	(date 1660821285615)
@@ -0,0 +1,76 @@
+package app
+
+import (
+	"context"
+	"database/sql"
+	"errors"
+	"log"
+	"net/http"
+	"os"
+	"os/signal"
+	"project/app/server"
+	"project/pkg/handler"
+	"project/pkg/logger"
+	"project/pkg/store/sqlBd"
+	"syscall"
+	"time"
+)
+
+func Run(config *server.Config) {
+	srv := new(server.Server)
+
+	db, err := newDB(config)
+	if err != nil {
+		log.Print(err)
+	}
+	defer db.Close()
+
+	// init bd
+	store := sqlBd.New(db)
+
+	// init handler
+	hand := handler.NewHandler(store)
+
+	go func() {
+		if err := srv.Run(config, hand); !errors.Is(err, http.ErrServerClosed) {
+			logger.Errorf("error occurred while running http server: %s\n", err.Error())
+		}
+	}()
+	logger.Info("Server started")
+
+	// Graceful Shutdown
+	quit := make(chan os.Signal, 1)
+	signal.Notify(quit, syscall.SIGTERM, syscall.SIGINT)
+
+	n := <-quit
+	log.Println(n)
+	const timeout = 5 * time.Second
+
+	ctx, shutdown := context.WithTimeout(context.Background(), timeout)
+	defer shutdown()
+
+	if err := srv.Stop(ctx); err != nil {
+		logger.Errorf("failed to stop server: %v", err)
+	}
+
+	//if err := srv.Run(config, hand); err != nil {
+	//	log.Panic(err)
+	//}
+}
+
+// init db open
+func newDB(c *server.Config) (*sql.DB, error) {
+	db, err := sql.Open(c.DriverName, c.DatabaseURL)
+	if err != nil {
+		return nil, err
+	}
+
+	if err := db.Ping(); err != nil {
+		return nil, err
+	}
+	db.SetConnMaxLifetime(time.Minute * 10)
+	db.SetMaxOpenConns(50)
+	db.SetMaxIdleConns(20)
+
+	return db, nil
+}
Index: cmd/main.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main\r\n\r\nimport (\r\n\t\"flag\"\r\n\t\"log\"\r\n\t\"project/pkg/server\"\r\n\r\n\t\"github.com/BurntSushi/toml\"\r\n)\r\n\r\nvar (\r\n\tconfigPath string\r\n)\r\n\r\nfunc init() {\r\n\tflag.StringVar(&configPath, \"config-path\", \"configs/server.toml\", \"path to config file\")\r\n}\r\n\r\nfunc main() {\r\n\t//server ...\r\n\tsrv := new(server.Server)\r\n\r\n\tflag.Parse()\r\n\r\n\tconfig := server.NewConfig()\r\n\t_, err := toml.DecodeFile(configPath, config)\r\n\r\n\tif err != nil {\r\n\t\tlog.Fatal(err)\r\n\t}\r\n\r\n\tif err := srv.Run(config); err != nil {\r\n\t\tlog.Fatal(err)\r\n\t}\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cmd/main.go b/cmd/main.go
--- a/cmd/main.go	(revision 43cba2b4e389c8eb27409dbedc553bd236137cb5)
+++ b/cmd/main.go	(date 1660819973524)
@@ -2,10 +2,10 @@
 
 import (
 	"flag"
-	"log"
-	"project/pkg/server"
-
 	"github.com/BurntSushi/toml"
+	"log"
+	"project/app"
+	srv "project/app/server"
 )
 
 var (
@@ -17,20 +17,15 @@
 }
 
 func main() {
-	//server ...
-	srv := new(server.Server)
-
 	flag.Parse()
-
-	config := server.NewConfig()
+	config := srv.NewConfig()
 	_, err := toml.DecodeFile(configPath, config)
-
 	if err != nil {
 		log.Fatal(err)
 	}
-
-	if err := srv.Run(config); err != nil {
-		log.Fatal(err)
-	}
+	app.Run(config)
+	//if err := srv.Run(config); err != nil {
+	//	log.Panic(err)
+	//}
 
 }
Index: pkg/model/user_test.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pkg/model/user_test.go b/app/model/user_test.go
rename from pkg/model/user_test.go
rename to app/model/user_test.go
--- a/pkg/model/user_test.go	(revision 43cba2b4e389c8eb27409dbedc553bd236137cb5)
+++ b/app/model/user_test.go	(date 1660817518486)
@@ -1,7 +1,7 @@
 package model_test
 
 import (
-	"project/pkg/model"
+	model2 "project/app/model"
 	"testing"
 
 	"github.com/stretchr/testify/assert"
@@ -10,20 +10,20 @@
 func TestUser_Validate(t *testing.T) {
 	testCases := []struct {
 		name    string
-		u       func() *model.User
+		u       func() *model2.User
 		isValid bool
 	}{
 		{
 			name: "valid",
-			u: func() *model.User {
-				return model.TestUser(t)
+			u: func() *model2.User {
+				return model2.TestUser(t)
 			},
 			isValid: true,
 		},
 		{
 			name: "with encrypted password",
-			u: func() *model.User {
-				u := model.TestUser(t)
+			u: func() *model2.User {
+				u := model2.TestUser(t)
 				u.Password = ""
 				u.EncryptedPassword = "encryptedpassword"
 
@@ -33,8 +33,8 @@
 		},
 		{
 			name: "empty email",
-			u: func() *model.User {
-				u := model.TestUser(t)
+			u: func() *model2.User {
+				u := model2.TestUser(t)
 				u.Email = ""
 
 				return u
@@ -43,8 +43,8 @@
 		},
 		{
 			name: "invalid email",
-			u: func() *model.User {
-				u := model.TestUser(t)
+			u: func() *model2.User {
+				u := model2.TestUser(t)
 				u.Email = "invalid"
 
 				return u
@@ -53,8 +53,8 @@
 		},
 		{
 			name: "empty password",
-			u: func() *model.User {
-				u := model.TestUser(t)
+			u: func() *model2.User {
+				u := model2.TestUser(t)
 				u.Password = ""
 
 				return u
@@ -63,8 +63,8 @@
 		},
 		{
 			name: "short password",
-			u: func() *model.User {
-				u := model.TestUser(t)
+			u: func() *model2.User {
+				u := model2.TestUser(t)
 				u.Password = "short"
 
 				return u
@@ -85,7 +85,7 @@
 }
 
 func TestUser_BeforeCreate(t *testing.T) {
-	u := model.TestUser(t)
+	u := model2.TestUser(t)
 	assert.NoError(t, u.BeforeCreate())
 	assert.NotEmpty(t, u.EncryptedPassword)
 }
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1660682030605)
+++ b/.idea/modules.xml	(date 1660682030605)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/project.iml" filepath="$PROJECT_DIR$/.idea/project.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/project.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/project.iml b/.idea/project.iml
new file mode 100644
--- /dev/null	(date 1660682030596)
+++ b/.idea/project.iml	(date 1660682030596)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="WEB_MODULE" version="4">
+  <component name="Go" enabled="true" />
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1660682031213)
+++ b/.idea/.gitignore	(date 1660682031213)
@@ -0,0 +1,8 @@
+# Default ignored files
+/shelf/
+/workspace.xml
+# Editor-based HTTP Client requests
+/httpRequests/
+# Datasource local storage ignored files
+/dataSources/
+/dataSources.local.xml
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1660682030617)
+++ b/.idea/vcs.xml	(date 1660682030617)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: pkg/store/store.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package store\r\n\r\nimport \"project/pkg/model\"\r\n\r\n// UserRepository ...\r\ntype UserRepository interface {\r\n\tCreate(*model.User) error\r\n\tFind(int) (*model.User, error)\r\n}\r\n\r\n// Store ...\r\ntype Store interface {\r\n\tUser() UserRepository\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pkg/store/store.go b/pkg/store/store.go
--- a/pkg/store/store.go	(revision 43cba2b4e389c8eb27409dbedc553bd236137cb5)
+++ b/pkg/store/store.go	(date 1660817518499)
@@ -1,14 +1,22 @@
 package store
 
-import "project/pkg/model"
+import (
+	model2 "project/app/model"
+)
 
 // UserRepository ...
 type UserRepository interface {
-	Create(*model.User) error
-	Find(int) (*model.User, error)
+	Create(*model2.User) error
+	Find(int) (*model2.User, error)
+}
+
+// TokenRepository ...
+type TokenRepository interface {
+	Find(int) (*model2.Token, error)
 }
 
 // Store ...
 type Store interface {
 	User() UserRepository
+	Token() TokenRepository
 }
Index: pkg/store/sqlBd/userrepository_test.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package sqlBd_test\r\n\r\nimport (\r\n\t\"project/pkg/model\"\r\n\t\"project/pkg/store/sqlBd\"\r\n\t\"testing\"\r\n\r\n\t\"github.com/stretchr/testify/assert\"\r\n)\r\n\r\nfunc TestUserRepository_Create(t *testing.T) {\r\n\tdb, teardown := sqlBd.TestDB(t, databaseURL)\r\n\tdefer teardown(\"user\")\r\n\r\n\ts := sqlBd.New(db)\r\n\tu := model.TestUser(t)\r\n\tassert.NoError(t, s.User().Create(u))\r\n\tassert.NotNil(t, u.ID)\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pkg/store/sqlBd/userrepository_test.go b/pkg/store/sqlBd/userrepository_test.go
--- a/pkg/store/sqlBd/userrepository_test.go	(revision 43cba2b4e389c8eb27409dbedc553bd236137cb5)
+++ b/pkg/store/sqlBd/userrepository_test.go	(date 1660817518549)
@@ -1,7 +1,7 @@
 package sqlBd_test
 
 import (
-	"project/pkg/model"
+	"project/app/model"
 	"project/pkg/store/sqlBd"
 	"testing"
 
Index: pkg/store/sqlBd/UserRepository.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package sqlBd\r\n\r\nimport (\r\n\t\"database/sql\"\r\n\t\"project/pkg/model\"\r\n\t\"project/pkg/store\"\r\n)\r\n\r\n// Repository ...\r\ntype UserRepository struct {\r\n\tstore *Store\r\n}\r\n\r\nfunc (r UserRepository) Create(u *model.User) error {\r\n\r\n\treturn r.store.db.QueryRow(\r\n\t\t\"INSERT INTO `user` (Email, Password) VALUES (?, ?)\",\r\n\t\tu.Email, u.Password).Err()\r\n}\r\nfunc (r *UserRepository) Find(id int) (*model.User, error) {\r\n\tu := &model.User{}\r\n\tif err := r.store.db.QueryRow(\r\n\t\t\"SELECT Id, email, encrypted_password FROM user WHERE id = ?\",\r\n\t\tid,\r\n\t).Scan(\r\n\t\t&u.ID,\r\n\t\t&u.Email,\r\n\t\t&u.EncryptedPassword,\r\n\t); err != nil {\r\n\t\tif err == sql.ErrNoRows {\r\n\t\t\treturn nil, store.ErrRecordNotFound\r\n\t\t}\r\n\r\n\t\treturn nil, err\r\n\t}\r\n\r\n\treturn u, nil\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pkg/store/sqlBd/UserRepository.go b/pkg/store/sqlBd/UserRepository.go
--- a/pkg/store/sqlBd/UserRepository.go	(revision 43cba2b4e389c8eb27409dbedc553bd236137cb5)
+++ b/pkg/store/sqlBd/UserRepository.go	(date 1660817518459)
@@ -2,7 +2,7 @@
 
 import (
 	"database/sql"
-	"project/pkg/model"
+	"project/app/model"
 	"project/pkg/store"
 )
 
Index: pkg/store/sqlBd/store.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package sqlBd\r\n\r\nimport (\r\n\t\"database/sql\"\r\n\t\"project/pkg/store\"\r\n\r\n\t_ \"github.com/go-sql-driver/mysql\"\r\n)\r\n\r\ntype Store struct {\r\n\tdb             *sql.DB\r\n\tuserRepository *UserRepository\r\n}\r\n\r\n// New ...\r\nfunc New(db *sql.DB) *Store {\r\n\treturn &Store{\r\n\t\tdb: db,\r\n\t}\r\n}\r\n\r\n// User ...\r\nfunc (s *Store) User() store.UserRepository {\r\n\tif s.userRepository != nil {\r\n\t\treturn s.userRepository\r\n\t}\r\n\r\n\ts.userRepository = &UserRepository{\r\n\t\tstore: s,\r\n\t}\r\n\r\n\treturn s.userRepository\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pkg/store/sqlBd/store.go b/pkg/store/sqlBd/store.go
--- a/pkg/store/sqlBd/store.go	(revision 43cba2b4e389c8eb27409dbedc553bd236137cb5)
+++ b/pkg/store/sqlBd/store.go	(date 1660480228524)
@@ -8,8 +8,9 @@
 )
 
 type Store struct {
-	db             *sql.DB
-	userRepository *UserRepository
+	db              *sql.DB
+	userRepository  *UserRepository
+	tokenRepository *TokenRepository
 }
 
 // New ...
@@ -31,3 +32,14 @@
 
 	return s.userRepository
 }
+func (s *Store) Token() store.TokenRepository {
+	if s.tokenRepository != nil {
+		return s.tokenRepository
+	}
+
+	s.tokenRepository = &TokenRepository{
+		store: s,
+	}
+
+	return s.tokenRepository
+}
Index: pkg/store/teststore/userrepository.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package teststore\r\n\r\nimport (\r\n\t\"project/pkg/model\"\r\n\t\"project/pkg/store\"\r\n)\r\n\r\n// UserRepository ...\r\ntype UserRepository struct {\r\n\tstore *Store\r\n\tusers map[int]*model.User\r\n}\r\n\r\n// Create ...\r\nfunc (r *UserRepository) Create(u *model.User) error {\r\n\tif err := u.Validate(); err != nil {\r\n\t\treturn err\r\n\t}\r\n\r\n\tif err := u.BeforeCreate(); err != nil {\r\n\t\treturn err\r\n\t}\r\n\r\n\tu.ID = len(r.users) + 1\r\n\tr.users[u.ID] = u\r\n\r\n\treturn nil\r\n}\r\n\r\n// Find ...\r\nfunc (r *UserRepository) Find(id int) (*model.User, error) {\r\n\tu, ok := r.users[id]\r\n\tif !ok {\r\n\t\treturn nil, store.ErrRecordNotFound\r\n\t}\r\n\r\n\treturn u, nil\r\n}\r\n\r\n// FindByEmail ...\r\nfunc (r *UserRepository) FindByEmail(email string) (*model.User, error) {\r\n\tfor _, u := range r.users {\r\n\t\tif u.Email == email {\r\n\t\t\treturn u, nil\r\n\t\t}\r\n\t}\r\n\r\n\treturn nil, store.ErrRecordNotFound\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pkg/store/teststore/userrepository.go b/pkg/store/teststore/userrepository.go
--- a/pkg/store/teststore/userrepository.go	(revision 43cba2b4e389c8eb27409dbedc553bd236137cb5)
+++ b/pkg/store/teststore/userrepository.go	(date 1660817518512)
@@ -1,7 +1,7 @@
 package teststore
 
 import (
-	"project/pkg/model"
+	"project/app/model"
 	"project/pkg/store"
 )
 
Index: pkg/store/teststore/userrepository_test.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package teststore_test\r\n\r\nimport (\r\n\t\"project/pkg/model\"\r\n\t\"project/pkg/store/teststore\"\r\n\t\"testing\"\r\n\r\n\t\"github.com/stretchr/testify/assert\"\r\n)\r\n\r\nfunc TestUserRepository_Create(t *testing.T) {\r\n\ts := teststore.New()\r\n\tu := model.TestUser(t)\r\n\tassert.NoError(t, s.User().Create(u))\r\n\tassert.NotNil(t, u.ID)\r\n}\r\n\r\nfunc TestUserRepository_Find(t *testing.T) {\r\n\ts := teststore.New()\r\n\tu1 := model.TestUser(t)\r\n\ts.User().Create(u1)\r\n\tu2, err := s.User().Find(u1.ID)\r\n\tassert.NoError(t, err)\r\n\tassert.NotNil(t, u2)\r\n}\r\n\r\n// func TestUserRepository_FindByEmail(t *testing.T) {\r\n// \ts := teststore.New()\r\n// \tu1 := model.TestUser(t)\r\n// \t_, err := s.User().FindByEmail(u1.Email)\r\n// \tassert.EqualError(t, err, store.ErrRecordNotFound.Error())\r\n\r\n// \ts.User().Create(u1)\r\n// \tu2, err := s.User().FindByEmail(u1.Email)\r\n// \tassert.NoError(t, err)\r\n// \tassert.NotNil(t, u2)\r\n// }\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pkg/store/teststore/userrepository_test.go b/pkg/store/teststore/userrepository_test.go
--- a/pkg/store/teststore/userrepository_test.go	(revision 43cba2b4e389c8eb27409dbedc553bd236137cb5)
+++ b/pkg/store/teststore/userrepository_test.go	(date 1660817518536)
@@ -1,7 +1,7 @@
 package teststore_test
 
 import (
-	"project/pkg/model"
+	"project/app/model"
 	"project/pkg/store/teststore"
 	"testing"
 
Index: pkg/store/teststore/store.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package teststore\r\n\r\nimport (\r\n\t\"project/pkg/model\"\r\n\t\"project/pkg/store\"\r\n)\r\n\r\n// Store ...\r\ntype Store struct {\r\n\tuserRepository *UserRepository\r\n}\r\n\r\n// New ...\r\nfunc New() *Store {\r\n\treturn &Store{}\r\n}\r\n\r\n// User ...\r\nfunc (s *Store) User() store.UserRepository {\r\n\tif s.userRepository != nil {\r\n\t\treturn s.userRepository\r\n\t}\r\n\r\n\ts.userRepository = &UserRepository{\r\n\t\tstore: s,\r\n\t\tusers: make(map[int]*model.User),\r\n\t}\r\n\r\n\treturn s.userRepository\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pkg/store/teststore/store.go b/pkg/store/teststore/store.go
--- a/pkg/store/teststore/store.go	(revision 43cba2b4e389c8eb27409dbedc553bd236137cb5)
+++ b/pkg/store/teststore/store.go	(date 1660817518473)
@@ -1,7 +1,7 @@
 package teststore
 
 import (
-	"project/pkg/model"
+	"project/app/model"
 	"project/pkg/store"
 )
 
Index: pkg/handler/hadleRequst.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package handler\r\n\r\nimport (\r\n\t\"encoding/json\"\r\n\t\"io/ioutil\"\r\n\t\"net/http\"\r\n\t\"project/pkg/store\"\r\n\r\n\t\"github.com/gin-gonic/gin\"\r\n)\r\n\r\ntype Handler struct {\r\n\trouter *gin.Engine\r\n\tstore  store.Store\r\n\tIndex\r\n}\r\ntype Index struct {\r\n}\r\n\r\nfunc NewHandler(store store.Store) *Handler {\r\n\thadler := &Handler{\r\n\t\trouter: gin.New(),\r\n\t\tstore:  store,\r\n\t}\r\n\treturn hadler\r\n}\r\nfunc (h *Handler) Routing() *gin.Engine {\r\n\r\n\treturn h.router\r\n}\r\n\r\nfunc (h *Handler) ServeHTTP(w http.ResponseWriter, r *http.Request) {\r\n\th.router.ServeHTTP(w, r)\r\n}\r\n\r\nfunc (h *Index) ServeHTTP(ctx *gin.Context) {\r\n\r\n\tctx.Request.ParseForm()\r\n\tresult := []map[string]any{}\r\n\tadd(&result)\r\n\r\n\tget := ctx.Request.Form\r\n\tctx.HTML(http.StatusOK, \"index\", gin.H{\r\n\t\t\"Post\": result,\r\n\t\t\"Rget\": get,\r\n\t})\r\n\r\n}\r\nfunc add(result *[]map[string]any) error {\r\n\r\n\t// params := url.Values{}\r\n\t// params.Add(\"X-Token\", `uz-gWor_utU_sajBMtbsloKL2DmlxkOElo6eKKy_LhgA`)\r\n\t// body := strings.NewReader(params.Encode())\r\n\r\n\t// req, err := http.NewRequest(\"GET\", \"\", body)\r\n\t// if err != nil {\r\n\t// \t// handle err\r\n\t// if err := Run(g, routers); err != nil {\r\n\t// \tlog.Fatal(err)\r\n\t// }\r\n\t// req.Header.Set(\"Content-Type\", \"application/x-www-form-urlencoded\")\r\n\r\n\t// resp, err := http.DefaultClient.Do(req)\r\n\t// if err != nil {\r\n\t// \t// handle err\r\n\t// }\r\n\r\n\t// defer resp.Body.Close()\r\n\r\n\t// log.Println(&resp.Body)\r\n\r\n\treq, err := http.NewRequest(\"GET\", \"https://api.monobank.ua/personal/statement/huGbpnagwBu09tUnio8zXA/1658086424\", nil)\r\n\tif err != nil {\r\n\t\treturn err\r\n\t}\r\n\r\n\treq.Header.Add(\"X-Token\", \"uz-gWor_utU_sajBMtbsloKL2DmlxkOElo6eKKy_LhgA\")\r\n\treq.Header.Set(\"Content-Type\", \"application/x-www-form-urlencoded\")\r\n\tresp, err := http.DefaultClient.Do(req)\r\n\tif err != nil {\r\n\t\treturn err\r\n\t}\r\n\tbody, err := ioutil.ReadAll(resp.Body)\r\n\tif err != nil {\r\n\t\treturn err\r\n\t}\r\n\t//Convert the body to type string\r\n\r\n\tjson.Unmarshal(body, &result)\r\n\r\n\t// var money float32\r\n\t// for _, element := range result {\r\n\t// \tif element.Amount < 0 {\r\n\t// \t\tmoney = float32(element.Amount) / 100\r\n\t// \t\tfmt.Println(element.Description, money, float32(element.Balance)/100, time.Unix(int64(element.Time), 0))\r\n\t// \t}\r\n\t// }\r\n\tdefer resp.Body.Close()\r\n\r\n\treturn nil\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pkg/handler/hadleRequst.go b/pkg/handler/hadleRequst.go
--- a/pkg/handler/hadleRequst.go	(revision 43cba2b4e389c8eb27409dbedc553bd236137cb5)
+++ b/pkg/handler/hadleRequst.go	(date 1660818585375)
@@ -2,9 +2,11 @@
 
 import (
 	"encoding/json"
-	"io/ioutil"
+	"io"
+	"log"
 	"net/http"
 	"project/pkg/store"
+	"strconv"
 
 	"github.com/gin-gonic/gin"
 )
@@ -12,17 +14,17 @@
 type Handler struct {
 	router *gin.Engine
 	store  store.Store
-	Index
 }
 type Index struct {
+	Handler *Handler
 }
 
 func NewHandler(store store.Store) *Handler {
-	hadler := &Handler{
+	return &Handler{
 		router: gin.New(),
 		store:  store,
 	}
-	return hadler
+
 }
 func (h *Handler) Routing() *gin.Engine {
 
@@ -35,16 +37,44 @@
 
 func (h *Index) ServeHTTP(ctx *gin.Context) {
 
-	ctx.Request.ParseForm()
+	r := ctx.Request
 	result := []map[string]any{}
-	add(&result)
+	err := add(&result)
+	if err != nil {
+		log.Fatal(err)
+	}
+	get := r.Form
 
-	get := ctx.Request.Form
 	ctx.HTML(http.StatusOK, "index", gin.H{
 		"Post": result,
 		"Rget": get,
 	})
 
+}
+
+// Api  curl -d "key=1" -X GET "http://localhost:8088/api?id=1"
+func (h *Index) Api(ctx *gin.Context) {
+
+	w := ctx.Writer
+	r := ctx.Request
+
+	get := r.Form
+	var id int
+	id, _ = strconv.Atoi(get["id"][0])
+
+	log.Println(r.FormValue("key"))
+
+	token, err := h.Handler.store.Token().Find(id)
+	if err != nil {
+		log.Fatal(err)
+	}
+
+	w.WriteHeader(http.StatusOK)
+
+	ctx.JSONP(http.StatusOK, token)
+
+	// log.Println(w.Header().Get("X-Request-ID"))
+
 }
 func add(result *[]map[string]any) error {
 
@@ -69,7 +99,7 @@
 
 	// log.Println(&resp.Body)
 
-	req, err := http.NewRequest("GET", "https://api.monobank.ua/personal/statement/huGbpnagwBu09tUnio8zXA/1658086424", nil)
+	req, err := http.NewRequest("GET", "https://api.monobank.ua/personal/statement/huGbpnagwBu09tUnio8zXA/1659349687", nil)
 	if err != nil {
 		return err
 	}
@@ -80,14 +110,14 @@
 	if err != nil {
 		return err
 	}
-	body, err := ioutil.ReadAll(resp.Body)
+	body, err := io.ReadAll(resp.Body)
 	if err != nil {
 		return err
 	}
+
 	//Convert the body to type string
 
 	json.Unmarshal(body, &result)
-
 	// var money float32
 	// for _, element := range result {
 	// 	if element.Amount < 0 {
Index: go.mod
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>module project\r\n\r\ngo 1.18\r\n\r\nrequire (\r\n\tgithub.com/BurntSushi/toml v1.2.0\r\n\tgithub.com/gin-gonic/gin v1.8.1\r\n\tgithub.com/go-ozzo/ozzo-validation v3.6.0+incompatible\r\n\tgithub.com/go-sql-driver/mysql v1.6.0\r\n\tgithub.com/lib/pq v1.10.6\r\n\tgithub.com/stretchr/testify v1.8.0\r\n\tgolang.org/x/crypto v0.0.0-20220722155217-630584e8d5aa\r\n)\r\n\r\nrequire (\r\n\tgithub.com/asaskevich/govalidator v0.0.0-20190424111038-f61b66f89f4a // indirect\r\n\tgithub.com/davecgh/go-spew v1.1.1 // indirect\r\n\tgithub.com/gin-contrib/sse v0.1.0 // indirect\r\n\tgithub.com/go-playground/locales v0.14.0 // indirect\r\n\tgithub.com/go-playground/universal-translator v0.18.0 // indirect\r\n\tgithub.com/go-playground/validator/v10 v10.11.0 // indirect\r\n\tgithub.com/goccy/go-json v0.9.10 // indirect\r\n\tgithub.com/json-iterator/go v1.1.12 // indirect\r\n\tgithub.com/leodido/go-urn v1.2.1 // indirect\r\n\tgithub.com/mattn/go-isatty v0.0.14 // indirect\r\n\tgithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect\r\n\tgithub.com/modern-go/reflect2 v1.0.2 // indirect\r\n\tgithub.com/pelletier/go-toml/v2 v2.0.2 // indirect\r\n\tgithub.com/pmezard/go-difflib v1.0.0 // indirect\r\n\tgithub.com/ugorji/go/codec v1.2.7 // indirect\r\n\tgolang.org/x/net v0.0.0-20220725212005-46097bf591d3 // indirect\r\n\tgolang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f // indirect\r\n\tgolang.org/x/text v0.3.7 // indirect\r\n\tgoogle.golang.org/protobuf v1.28.0 // indirect\r\n\tgopkg.in/yaml.v2 v2.4.0 // indirect\r\n\tgopkg.in/yaml.v3 v3.0.1 // indirect\r\n)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/go.mod b/go.mod
--- a/go.mod	(revision 43cba2b4e389c8eb27409dbedc553bd236137cb5)
+++ b/go.mod	(date 1660819838586)
@@ -1,6 +1,6 @@
 module project
 
-go 1.18
+go 1.19
 
 require (
 	github.com/BurntSushi/toml v1.2.0
@@ -13,24 +13,25 @@
 )
 
 require (
-	github.com/asaskevich/govalidator v0.0.0-20190424111038-f61b66f89f4a // indirect
+	github.com/asaskevich/govalidator v0.0.0-20210307081110-f21760c49a8d // indirect
 	github.com/davecgh/go-spew v1.1.1 // indirect
 	github.com/gin-contrib/sse v0.1.0 // indirect
 	github.com/go-playground/locales v0.14.0 // indirect
 	github.com/go-playground/universal-translator v0.18.0 // indirect
-	github.com/go-playground/validator/v10 v10.11.0 // indirect
-	github.com/goccy/go-json v0.9.10 // indirect
+	github.com/go-playground/validator/v10 v10.10.0 // indirect
+	github.com/goccy/go-json v0.9.7 // indirect
 	github.com/json-iterator/go v1.1.12 // indirect
 	github.com/leodido/go-urn v1.2.1 // indirect
 	github.com/mattn/go-isatty v0.0.14 // indirect
-	github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect
+	github.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421 // indirect
 	github.com/modern-go/reflect2 v1.0.2 // indirect
-	github.com/pelletier/go-toml/v2 v2.0.2 // indirect
+	github.com/pelletier/go-toml/v2 v2.0.1 // indirect
 	github.com/pmezard/go-difflib v1.0.0 // indirect
+	github.com/sirupsen/logrus v1.9.0 // indirect
 	github.com/ugorji/go/codec v1.2.7 // indirect
-	golang.org/x/net v0.0.0-20220725212005-46097bf591d3 // indirect
-	golang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f // indirect
-	golang.org/x/text v0.3.7 // indirect
+	golang.org/x/net v0.0.0-20211112202133-69e39bad7dc2 // indirect
+	golang.org/x/sys v0.0.0-20220715151400-c0bba94af5f8 // indirect
+	golang.org/x/text v0.3.6 // indirect
 	google.golang.org/protobuf v1.28.0 // indirect
 	gopkg.in/yaml.v2 v2.4.0 // indirect
 	gopkg.in/yaml.v3 v3.0.1 // indirect
Index: pkg/server/server.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pkg/server/server.go b/app/server/server.go
rename from pkg/server/server.go
rename to app/server/server.go
--- a/pkg/server/server.go	(revision 43cba2b4e389c8eb27409dbedc553bd236137cb5)
+++ b/app/server/server.go	(date 1660820773714)
@@ -1,11 +1,10 @@
 package server
 
 import (
-	"database/sql"
+	"context"
 	"html/template"
 	"net/http"
 	"project/pkg/handler"
-	"project/pkg/store/sqlBd"
 	"time"
 )
 
@@ -14,23 +13,16 @@
 	config     *Config
 }
 
-func (s *Server) Run(config *Config) error {
+func (s *Server) Run(config *Config, han *handler.Handler) error {
 
-	s.config = config
-	db, err := s.newDB()
-	if err != nil {
-		return err
-	}
-	defer db.Close()
+	//init index
+	index := handler.Index{Handler: han}
 
-	// init bd
-	store := sqlBd.New(db)
-	// init handler
-	srv := handler.NewHandler(store)
 	//register routing
-	configureRouter(srv)
+	configureRouter(han, &index)
+
 	//get router
-	router := srv.Routing()
+	router := han.Routing()
 
 	// init server add addr and router
 	s.httpServer = &http.Server{
@@ -44,23 +36,10 @@
 
 }
 
-// init db open
-func (s *Server) newDB() (*sql.DB, error) {
-	db, err := sql.Open(s.config.DriverName, s.config.DatabaseURL)
-	if err != nil {
-		return nil, err
-	}
-
-	if err := db.Ping(); err != nil {
-		return nil, err
-	}
-	db.SetConnMaxLifetime(time.Minute * 10)
-	db.SetMaxOpenConns(50)
-	db.SetMaxIdleConns(20)
-	return db, nil
+func (s *Server) Stop(ctx context.Context) error {
+	return s.httpServer.Shutdown(ctx)
 }
-
-func configureRouter(h *handler.Handler) {
+func configureRouter(h *handler.Handler, i *handler.Index) {
 
 	h.Routing().Static("/static", "./static/")
 	h.Routing().SetFuncMap(template.FuncMap{
@@ -69,7 +48,9 @@
 	})
 
 	h.Routing().LoadHTMLGlob("templates/*.html")
-
-	h.Routing().GET("/", h.Index.ServeHTTP)
-
+	api := h.Routing().Group("/index")
+	{
+		api.GET("/", i.ServeHTTP)
+		api.GET("/api", i.Api)
+	}
 }
Index: go.sum
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>github.com/BurntSushi/toml v1.2.0 h1:Rt8g24XnyGTyglgET/PRUNlrUeu9F5L+7FilkXfZgs0=\r\ngithub.com/BurntSushi/toml v1.2.0/go.mod h1:CxXYINrC8qIiEnFrOxCa7Jy5BFHlXnUU2pbicEuybxQ=\r\ngithub.com/asaskevich/govalidator v0.0.0-20190424111038-f61b66f89f4a h1:idn718Q4B6AGu/h5Sxe66HYVdqdGu2l9Iebqhi/AEoA=\r\ngithub.com/asaskevich/govalidator v0.0.0-20190424111038-f61b66f89f4a/go.mod h1:lB+ZfQJz7igIIfQNfa7Ml4HSf2uFQQRzpGGRXenZAgY=\r\ngithub.com/creack/pty v1.1.9/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=\r\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\r\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\r\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\r\ngithub.com/gin-contrib/sse v0.1.0 h1:Y/yl/+YNO8GZSjAhjMsSuLt29uWRFHdHYUb5lYOV9qE=\r\ngithub.com/gin-contrib/sse v0.1.0/go.mod h1:RHrZQHXnP2xjPF+u1gW/2HnVO7nvIa9PG3Gm+fLHvGI=\r\ngithub.com/gin-gonic/gin v1.8.1 h1:4+fr/el88TOO3ewCmQr8cx/CtZ/umlIRIs5M4NTNjf8=\r\ngithub.com/gin-gonic/gin v1.8.1/go.mod h1:ji8BvRH1azfM+SYow9zQ6SZMvR8qOMZHmsCuWR9tTTk=\r\ngithub.com/go-ozzo/ozzo-validation v3.6.0+incompatible h1:msy24VGS42fKO9K1vLz82/GeYW1cILu7Nuuj1N3BBkE=\r\ngithub.com/go-ozzo/ozzo-validation v3.6.0+incompatible/go.mod h1:gsEKFIVnabGBt6mXmxK0MoFy+cZoTJY6mu5Ll3LVLBU=\r\ngithub.com/go-playground/assert/v2 v2.0.1 h1:MsBgLAaY856+nPRTKrp3/OZK38U/wa0CcBYNjji3q3A=\r\ngithub.com/go-playground/assert/v2 v2.0.1/go.mod h1:VDjEfimB/XKnb+ZQfWdccd7VUvScMdVu0Titje2rxJ4=\r\ngithub.com/go-playground/locales v0.14.0 h1:u50s323jtVGugKlcYeyzC0etD1HifMjqmJqb8WugfUU=\r\ngithub.com/go-playground/locales v0.14.0/go.mod h1:sawfccIbzZTqEDETgFXqTho0QybSa7l++s0DH+LDiLs=\r\ngithub.com/go-playground/universal-translator v0.18.0 h1:82dyy6p4OuJq4/CByFNOn/jYrnRPArHwAcmLoJZxyho=\r\ngithub.com/go-playground/universal-translator v0.18.0/go.mod h1:UvRDBj+xPUEGrFYl+lu/H90nyDXpg0fqeB/AQUGNTVA=\r\ngithub.com/go-playground/validator/v10 v10.11.0 h1:0W+xRM511GY47Yy3bZUbJVitCNg2BOGlCyvTqsp/xIw=\r\ngithub.com/go-playground/validator/v10 v10.11.0/go.mod h1:i+3WkQ1FvaUjjxh1kSvIA4dMGDBiPU55YFDl0WbKdWU=\r\ngithub.com/go-sql-driver/mysql v1.6.0 h1:BCTh4TKNUYmOmMUcQ3IipzF5prigylS7XXjEkfCHuOE=\r\ngithub.com/go-sql-driver/mysql v1.6.0/go.mod h1:DCzpHaOWr8IXmIStZouvnhqoel9Qv2LBy8hT2VhHyBg=\r\ngithub.com/goccy/go-json v0.9.10 h1:hCeNmprSNLB8B8vQKWl6DpuH0t60oEs+TAk9a7CScKc=\r\ngithub.com/goccy/go-json v0.9.10/go.mod h1:6MelG93GURQebXPDq3khkgXZkazVtN9CRI+MGFi0w8I=\r\ngithub.com/golang/protobuf v1.5.0/go.mod h1:FsONVRAS9T7sI+LIUmWTfcYkHO4aIWwzhcaSAoJOfIk=\r\ngithub.com/google/go-cmp v0.5.5 h1:Khx7svrCpmxxtHBq5j2mp/xVjsi8hQMfNLvJFAlrGgU=\r\ngithub.com/google/go-cmp v0.5.5/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\r\ngithub.com/google/gofuzz v1.0.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=\r\ngithub.com/json-iterator/go v1.1.12 h1:PV8peI4a0ysnczrg+LtxykD8LfKY9ML6u2jnxaEnrnM=\r\ngithub.com/json-iterator/go v1.1.12/go.mod h1:e30LSqwooZae/UwlEbR2852Gd8hjQvJoHmT4TnhNGBo=\r\ngithub.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\r\ngithub.com/kr/pretty v0.2.1/go.mod h1:ipq/a2n7PKx3OHsz4KJII5eveXtPO4qwEXGdVfWzfnI=\r\ngithub.com/kr/pretty v0.3.0 h1:WgNl7dwNpEZ6jJ9k1snq4pZsg7DOEN8hP9Xw0Tsjwk0=\r\ngithub.com/kr/pretty v0.3.0/go.mod h1:640gp4NfQd8pI5XOwp5fnNeVWj67G7CFk/SaSQn7NBk=\r\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\r\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\r\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\r\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\r\ngithub.com/leodido/go-urn v1.2.1 h1:BqpAaACuzVSgi/VLzGZIobT2z4v53pjosyNd9Yv6n/w=\r\ngithub.com/leodido/go-urn v1.2.1/go.mod h1:zt4jvISO2HfUBqxjfIshjdMTYS56ZS/qv49ictyFfxY=\r\ngithub.com/lib/pq v1.10.6 h1:jbk+ZieJ0D7EVGJYpL9QTz7/YW6UHbmdnZWYyK5cdBs=\r\ngithub.com/lib/pq v1.10.6/go.mod h1:AlVN5x4E4T544tWzH6hKfbfQvm3HdbOxrmggDNAPY9o=\r\ngithub.com/mattn/go-isatty v0.0.14 h1:yVuAays6BHfxijgZPzw+3Zlu5yQgKGP2/hcQbHb7S9Y=\r\ngithub.com/mattn/go-isatty v0.0.14/go.mod h1:7GGIvUiUoEMVVmxf/4nioHXj79iQHKdU27kJ6hsGG94=\r\ngithub.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=\r\ngithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd h1:TRLaZ9cD/w8PVh93nsPXa1VrQ6jlwL5oN8l14QlcNfg=\r\ngithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=\r\ngithub.com/modern-go/reflect2 v1.0.2 h1:xBagoLtFs94CBntxluKeaWgTMpvLxC4ur3nMaC9Gz0M=\r\ngithub.com/modern-go/reflect2 v1.0.2/go.mod h1:yWuevngMOJpCy52FWWMvUC8ws7m/LJsjYzDa0/r8luk=\r\ngithub.com/pelletier/go-toml/v2 v2.0.2 h1:+jQXlF3scKIcSEKkdHzXhCTDLPFi5r1wnK6yPS+49Gw=\r\ngithub.com/pelletier/go-toml/v2 v2.0.2/go.mod h1:MovirKjgVRESsAvNZlAjtFwV867yGuwRkXbG66OzopI=\r\ngithub.com/pkg/diff v0.0.0-20210226163009-20ebb0f2a09e/go.mod h1:pJLUxLENpZxwdsKMEsNbx1VGcRFpLqf3715MtcvvzbA=\r\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\r\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\r\ngithub.com/rogpeppe/go-internal v1.6.1/go.mod h1:xXDCJY+GAPziupqXw64V24skbSoqbTEfhy4qGm1nDQc=\r\ngithub.com/rogpeppe/go-internal v1.8.0 h1:FCbCCtXNOY3UtUuHUYaghJg4y7Fd14rXifAYUAtL9R8=\r\ngithub.com/rogpeppe/go-internal v1.8.0/go.mod h1:WmiCO8CzOY8rg0OYDC4/i/2WRWAB6poM+XZ2dLUbcbE=\r\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\r\ngithub.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=\r\ngithub.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\r\ngithub.com/stretchr/testify v1.6.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\r\ngithub.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\r\ngithub.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\r\ngithub.com/stretchr/testify v1.7.2/go.mod h1:R6va5+xMeoiuVRoj+gSkQ7d3FALtqAAGI1FQKckRals=\r\ngithub.com/stretchr/testify v1.8.0 h1:pSgiaMZlXftHpm5L7V1+rVB+AZJydKsMxsQBIJw4PKk=\r\ngithub.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=\r\ngithub.com/ugorji/go v1.2.7/go.mod h1:nF9osbDWLy6bDVv/Rtoh6QgnvNDpmCalQV5urGCCS6M=\r\ngithub.com/ugorji/go/codec v1.2.7 h1:YPXUKf7fYbp/y8xloBqZOw2qaVggbfwMlI8WM3wZUJ0=\r\ngithub.com/ugorji/go/codec v1.2.7/go.mod h1:WGN1fab3R1fzQlVQTkfxVtIBhWDRqOviHU95kRgeqEY=\r\ngolang.org/x/crypto v0.0.0-20211215153901-e495a2d5b3d3/go.mod h1:IxCIyHEi3zRg3s0A5j5BB6A9Jmi73HwBIUl50j+osU4=\r\ngolang.org/x/crypto v0.0.0-20220722155217-630584e8d5aa h1:zuSxTR4o9y82ebqCUJYNGJbGPo6sKVl54f/TVDObg1c=\r\ngolang.org/x/crypto v0.0.0-20220722155217-630584e8d5aa/go.mod h1:IxCIyHEi3zRg3s0A5j5BB6A9Jmi73HwBIUl50j+osU4=\r\ngolang.org/x/net v0.0.0-20211112202133-69e39bad7dc2/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=\r\ngolang.org/x/net v0.0.0-20220725212005-46097bf591d3 h1:2yWTtPWWRcISTw3/o+s/Y4UOMnQL71DWyToOANFusCg=\r\ngolang.org/x/net v0.0.0-20220725212005-46097bf591d3/go.mod h1:AaygXjzTFtRAg2ttMY5RMuhpJ3cNnI0XpyFJD1iQRSM=\r\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\r\ngolang.org/x/sys v0.0.0-20210423082822-04245dca01da/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\r\ngolang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\r\ngolang.org/x/sys v0.0.0-20210630005230-0f9fa26af87c/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\r\ngolang.org/x/sys v0.0.0-20210806184541-e5e7981a1069/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\r\ngolang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f h1:v4INt8xihDGvnrfjMDVXGxw9wrfxYyCjk0KbXjhR55s=\r\ngolang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\r\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\r\ngolang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\r\ngolang.org/x/text v0.3.7 h1:olpwvP2KacW1ZWvsR7uQhoyTYvKAupfQrRGBFM352Gk=\r\ngolang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\r\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\r\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543 h1:E7g+9GITq07hpfrRu66IVDexMakfv52eLZ2CXBWiKr4=\r\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\r\ngoogle.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=\r\ngoogle.golang.org/protobuf v1.28.0 h1:w43yiav+6bVFTBQFZX0r7ipe9JQ1QsbMgHwbBziscLw=\r\ngoogle.golang.org/protobuf v1.28.0/go.mod h1:HV8QOd/L58Z+nl8r43ehVNZIU/HEI6OcFqwMG9pJV4I=\r\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\r\ngopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\r\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c h1:Hei/4ADfdWqJk1ZMxUNpqntNwaWcugrBjAiHlqqRiVk=\r\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c/go.mod h1:JHkPIbrfpd72SG/EVd6muEfDQjcINNoR0C8j2r3qZ4Q=\r\ngopkg.in/errgo.v2 v2.1.0/go.mod h1:hNsd1EY+bozCKY1Ytp96fpM3vjJbqLJn88ws8XvfDNI=\r\ngopkg.in/yaml.v2 v2.4.0 h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=\r\ngopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=\r\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\r\ngopkg.in/yaml.v3 v3.0.0-20210107192922-496545a6307b/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\r\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\r\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/go.sum b/go.sum
--- a/go.sum	(revision 43cba2b4e389c8eb27409dbedc553bd236137cb5)
+++ b/go.sum	(date 1660819838587)
@@ -1,7 +1,7 @@
 github.com/BurntSushi/toml v1.2.0 h1:Rt8g24XnyGTyglgET/PRUNlrUeu9F5L+7FilkXfZgs0=
 github.com/BurntSushi/toml v1.2.0/go.mod h1:CxXYINrC8qIiEnFrOxCa7Jy5BFHlXnUU2pbicEuybxQ=
-github.com/asaskevich/govalidator v0.0.0-20190424111038-f61b66f89f4a h1:idn718Q4B6AGu/h5Sxe66HYVdqdGu2l9Iebqhi/AEoA=
-github.com/asaskevich/govalidator v0.0.0-20190424111038-f61b66f89f4a/go.mod h1:lB+ZfQJz7igIIfQNfa7Ml4HSf2uFQQRzpGGRXenZAgY=
+github.com/asaskevich/govalidator v0.0.0-20210307081110-f21760c49a8d h1:Byv0BzEl3/e6D5CLfI0j/7hiIEtvGVFPCZ7Ei2oq8iQ=
+github.com/asaskevich/govalidator v0.0.0-20210307081110-f21760c49a8d/go.mod h1:WaHUgvxTVq04UNunO+XhnAqY/wQc+bxr74GqbsZ/Jqw=
 github.com/creack/pty v1.1.9/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=
 github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
 github.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=
@@ -18,12 +18,12 @@
 github.com/go-playground/locales v0.14.0/go.mod h1:sawfccIbzZTqEDETgFXqTho0QybSa7l++s0DH+LDiLs=
 github.com/go-playground/universal-translator v0.18.0 h1:82dyy6p4OuJq4/CByFNOn/jYrnRPArHwAcmLoJZxyho=
 github.com/go-playground/universal-translator v0.18.0/go.mod h1:UvRDBj+xPUEGrFYl+lu/H90nyDXpg0fqeB/AQUGNTVA=
-github.com/go-playground/validator/v10 v10.11.0 h1:0W+xRM511GY47Yy3bZUbJVitCNg2BOGlCyvTqsp/xIw=
-github.com/go-playground/validator/v10 v10.11.0/go.mod h1:i+3WkQ1FvaUjjxh1kSvIA4dMGDBiPU55YFDl0WbKdWU=
+github.com/go-playground/validator/v10 v10.10.0 h1:I7mrTYv78z8k8VXa/qJlOlEXn/nBh+BF8dHX5nt/dr0=
+github.com/go-playground/validator/v10 v10.10.0/go.mod h1:74x4gJWsvQexRdW8Pn3dXSGrTK4nAUsbPlLADvpJkos=
 github.com/go-sql-driver/mysql v1.6.0 h1:BCTh4TKNUYmOmMUcQ3IipzF5prigylS7XXjEkfCHuOE=
 github.com/go-sql-driver/mysql v1.6.0/go.mod h1:DCzpHaOWr8IXmIStZouvnhqoel9Qv2LBy8hT2VhHyBg=
-github.com/goccy/go-json v0.9.10 h1:hCeNmprSNLB8B8vQKWl6DpuH0t60oEs+TAk9a7CScKc=
-github.com/goccy/go-json v0.9.10/go.mod h1:6MelG93GURQebXPDq3khkgXZkazVtN9CRI+MGFi0w8I=
+github.com/goccy/go-json v0.9.7 h1:IcB+Aqpx/iMHu5Yooh7jEzJk1JZ7Pjtmys2ukPr7EeM=
+github.com/goccy/go-json v0.9.7/go.mod h1:6MelG93GURQebXPDq3khkgXZkazVtN9CRI+MGFi0w8I=
 github.com/golang/protobuf v1.5.0/go.mod h1:FsONVRAS9T7sI+LIUmWTfcYkHO4aIWwzhcaSAoJOfIk=
 github.com/google/go-cmp v0.5.5 h1:Khx7svrCpmxxtHBq5j2mp/xVjsi8hQMfNLvJFAlrGgU=
 github.com/google/go-cmp v0.5.5/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
@@ -44,48 +44,48 @@
 github.com/lib/pq v1.10.6/go.mod h1:AlVN5x4E4T544tWzH6hKfbfQvm3HdbOxrmggDNAPY9o=
 github.com/mattn/go-isatty v0.0.14 h1:yVuAays6BHfxijgZPzw+3Zlu5yQgKGP2/hcQbHb7S9Y=
 github.com/mattn/go-isatty v0.0.14/go.mod h1:7GGIvUiUoEMVVmxf/4nioHXj79iQHKdU27kJ6hsGG94=
+github.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421 h1:ZqeYNhU3OHLH3mGKHDcjJRFFRrJa6eAM5H+CtDdOsPc=
 github.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=
-github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd h1:TRLaZ9cD/w8PVh93nsPXa1VrQ6jlwL5oN8l14QlcNfg=
-github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=
 github.com/modern-go/reflect2 v1.0.2 h1:xBagoLtFs94CBntxluKeaWgTMpvLxC4ur3nMaC9Gz0M=
 github.com/modern-go/reflect2 v1.0.2/go.mod h1:yWuevngMOJpCy52FWWMvUC8ws7m/LJsjYzDa0/r8luk=
-github.com/pelletier/go-toml/v2 v2.0.2 h1:+jQXlF3scKIcSEKkdHzXhCTDLPFi5r1wnK6yPS+49Gw=
-github.com/pelletier/go-toml/v2 v2.0.2/go.mod h1:MovirKjgVRESsAvNZlAjtFwV867yGuwRkXbG66OzopI=
+github.com/pelletier/go-toml/v2 v2.0.1 h1:8e3L2cCQzLFi2CR4g7vGFuFxX7Jl1kKX8gW+iV0GUKU=
+github.com/pelletier/go-toml/v2 v2.0.1/go.mod h1:r9LEWfGN8R5k0VXJ+0BkIe7MYkRdwZOjgMj2KwnJFUo=
 github.com/pkg/diff v0.0.0-20210226163009-20ebb0f2a09e/go.mod h1:pJLUxLENpZxwdsKMEsNbx1VGcRFpLqf3715MtcvvzbA=
 github.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=
 github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
 github.com/rogpeppe/go-internal v1.6.1/go.mod h1:xXDCJY+GAPziupqXw64V24skbSoqbTEfhy4qGm1nDQc=
 github.com/rogpeppe/go-internal v1.8.0 h1:FCbCCtXNOY3UtUuHUYaghJg4y7Fd14rXifAYUAtL9R8=
 github.com/rogpeppe/go-internal v1.8.0/go.mod h1:WmiCO8CzOY8rg0OYDC4/i/2WRWAB6poM+XZ2dLUbcbE=
+github.com/sirupsen/logrus v1.9.0 h1:trlNQbNUG3OdDrDil03MCb1H2o9nJ1x4/5LYw7byDE0=
+github.com/sirupsen/logrus v1.9.0/go.mod h1:naHLuLoDiP4jHNo9R0sCBMtWGeIprob74mVsIT4qYEQ=
 github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=
 github.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=
 github.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=
 github.com/stretchr/testify v1.6.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
 github.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
 github.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
-github.com/stretchr/testify v1.7.2/go.mod h1:R6va5+xMeoiuVRoj+gSkQ7d3FALtqAAGI1FQKckRals=
 github.com/stretchr/testify v1.8.0 h1:pSgiaMZlXftHpm5L7V1+rVB+AZJydKsMxsQBIJw4PKk=
 github.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=
 github.com/ugorji/go v1.2.7/go.mod h1:nF9osbDWLy6bDVv/Rtoh6QgnvNDpmCalQV5urGCCS6M=
 github.com/ugorji/go/codec v1.2.7 h1:YPXUKf7fYbp/y8xloBqZOw2qaVggbfwMlI8WM3wZUJ0=
 github.com/ugorji/go/codec v1.2.7/go.mod h1:WGN1fab3R1fzQlVQTkfxVtIBhWDRqOviHU95kRgeqEY=
-golang.org/x/crypto v0.0.0-20211215153901-e495a2d5b3d3/go.mod h1:IxCIyHEi3zRg3s0A5j5BB6A9Jmi73HwBIUl50j+osU4=
+golang.org/x/crypto v0.0.0-20210711020723-a769d52b0f97/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=
 golang.org/x/crypto v0.0.0-20220722155217-630584e8d5aa h1:zuSxTR4o9y82ebqCUJYNGJbGPo6sKVl54f/TVDObg1c=
 golang.org/x/crypto v0.0.0-20220722155217-630584e8d5aa/go.mod h1:IxCIyHEi3zRg3s0A5j5BB6A9Jmi73HwBIUl50j+osU4=
+golang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=
+golang.org/x/net v0.0.0-20211112202133-69e39bad7dc2 h1:CIJ76btIcR3eFI5EgSo6k1qKw9KJexJuRLI9G7Hp5wE=
 golang.org/x/net v0.0.0-20211112202133-69e39bad7dc2/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=
-golang.org/x/net v0.0.0-20220725212005-46097bf591d3 h1:2yWTtPWWRcISTw3/o+s/Y4UOMnQL71DWyToOANFusCg=
-golang.org/x/net v0.0.0-20220725212005-46097bf591d3/go.mod h1:AaygXjzTFtRAg2ttMY5RMuhpJ3cNnI0XpyFJD1iQRSM=
 golang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20210423082822-04245dca01da/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.0.0-20210630005230-0f9fa26af87c/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/sys v0.0.0-20210806184541-e5e7981a1069 h1:siQdpVirKtzPhKl3lZWozZraCFObP8S1v6PRp0bLrtU=
 golang.org/x/sys v0.0.0-20210806184541-e5e7981a1069/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
-golang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f h1:v4INt8xihDGvnrfjMDVXGxw9wrfxYyCjk0KbXjhR55s=
-golang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/sys v0.0.0-20220715151400-c0bba94af5f8 h1:0A+M6Uqn+Eje4kHMK80dtF3JCXC4ykBgQG4Fe06QRhQ=
+golang.org/x/sys v0.0.0-20220715151400-c0bba94af5f8/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=
+golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
+golang.org/x/text v0.3.6 h1:aRYxNxv6iGQlyVaZmk6ZgYEDa+Jg18DxebPSrd6bg1M=
 golang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
-golang.org/x/text v0.3.7 h1:olpwvP2KacW1ZWvsR7uQhoyTYvKAupfQrRGBFM352Gk=
-golang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=
 golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
 golang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543 h1:E7g+9GITq07hpfrRu66IVDexMakfv52eLZ2CXBWiKr4=
 golang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
diff --git a/pkg/model/validations.go b/app/model/validations.go
rename from pkg/model/validations.go
rename to app/model/validations.go
diff --git a/pkg/model/testing.go b/app/model/testing.go
rename from pkg/model/testing.go
rename to app/model/testing.go
diff --git a/pkg/model/user.go b/app/model/user.go
rename from pkg/model/user.go
rename to app/model/user.go
diff --git a/pkg/server/config.go b/app/server/config.go
rename from pkg/server/config.go
rename to app/server/config.go
